using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Drawing.Drawing2D;
using NAudio.Wave;
using System.Diagnostics;
using System.IO;
using System.Threading.Tasks;
using NAudio.Wave.SampleProviders;
using System.Diagnostics;   // For Process.Start
using System.IO;            
using System.Windows.Forms; 
using Microsoft.Web.WebView2.Core; 
using System.Text.Json;     
using System.Threading.Tasks; 

namespace Crop_To_Search
{
    public partial class Form3 : Form
    {
        private WaveInEvent micSource;
        private WasapiLoopbackCapture speakerSource;
        private BufferedWaveProvider micBuffer;
        private BufferedWaveProvider speakerBuffer;
        private WaveFileWriter writer;
        private string outputFilePath;

        public Form3()
        {
            InitializeComponent();
            this.FormBorderStyle = FormBorderStyle.None;
            this.StartPosition = FormStartPosition.Manual;
            this.Size = new Size(300, 120);
        }

        protected override void OnPaint(PaintEventArgs e)
        {
            base.OnPaint(e);
            ApplyRoundCorners(10);
        }

        protected override void OnResize(EventArgs e)
        {
            base.OnResize(e);
            ApplyRoundCorners(10);
        }

        private void ApplyRoundCorners(int radius)
        {
            using (var path = new GraphicsPath())
            {
                float r = radius;
                float w = this.Width;
                float h = this.Height;
                path.StartFigure();
                path.AddArc(0, 0, r, r, 180, 90);
                path.AddArc(w - r, 0, r, r, 270, 90);
                path.AddArc(w - r, h - r, r, r, 0, 90);
                path.AddArc(0, h - r, r, r, 90, 90);
                path.CloseFigure();
                this.Region = new Region(path);
            }
        }

        private void label1_Click(object sender, EventArgs e)
        {

        }

        private void label2_Click(object sender, EventArgs e)
        {

        }

        private void Form3_Load(object sender, EventArgs e)
        {
            StartCombinedRecording();
        }

        public async void StartCombinedRecording()
        {
            outputFilePath = Path.Combine(Path.GetTempPath(), "result.wav");

            // Set up microphone input (44.1kHz mono)
            micSource = new WaveInEvent();
            micSource.WaveFormat = new WaveFormat(44100, 1);
            micBuffer = new BufferedWaveProvider(micSource.WaveFormat);

            micSource.DataAvailable += (s, a) =>
            {
                micBuffer.AddSamples(a.Buffer, 0, a.BytesRecorded);
            };

            // Set up speaker (loopback) input (system default format, often 48kHz stereo)
            speakerSource = new WasapiLoopbackCapture();
            speakerBuffer = new BufferedWaveProvider(speakerSource.WaveFormat);

            speakerSource.DataAvailable += (s, a) =>
            {
                speakerBuffer.AddSamples(a.Buffer, 0, a.BytesRecorded);
            };

            micSource.StartRecording();
            speakerSource.StartRecording();

            // Convert both sources to 44.1kHz stereo for mixing
            var micProvider = micBuffer.ToSampleProvider();
            if (micProvider.WaveFormat.SampleRate != 44100)
                micProvider = new WdlResamplingSampleProvider(micProvider, 44100);
            micProvider = micProvider.ToStereo();

            var speakerProvider = speakerBuffer.ToSampleProvider();
            if (speakerProvider.WaveFormat.SampleRate != 44100)
                speakerProvider = new WdlResamplingSampleProvider(speakerProvider, 44100);
            if (speakerProvider.WaveFormat.Channels == 1)
                speakerProvider = speakerProvider.ToStereo();

            var mixer = new MixingSampleProvider(new[] { micProvider, speakerProvider });
            mixer.ReadFully = true;

            writer = new WaveFileWriter(outputFilePath, WaveFormat.CreateIeeeFloatWaveFormat(44100, 2));

            var buffer = new float[44100 * 2]; // 1 second buffer for stereo
            int secondsRecorded = 0;

            while (secondsRecorded < 7) // Changed from 15 to 7
            {
                int samplesRead = mixer.Read(buffer, 0, buffer.Length);
                if (samplesRead > 0)
                {
                    writer.WriteSamples(buffer, 0, samplesRead);
                }
                await Task.Delay(1000);
                secondsRecorded++;
            }

            micSource.StopRecording();
            speakerSource.StopRecording();
            writer.Dispose();

            // Open the recorded file with the default audio player
           // Process.Start(outputFilePath);
        }

        private void webView2AhaMusic_Click(object sender, EventArgs e)
        {

        }
    }

    // Extension method must be in a static class
    public static class SampleProviderExtensions
    {
        public static ISampleProvider ToStereo(this ISampleProvider source)
        {
            if (source.WaveFormat.Channels == 2)
                return source;
            return new MonoToStereoSampleProvider(source);
        }
    }
}
